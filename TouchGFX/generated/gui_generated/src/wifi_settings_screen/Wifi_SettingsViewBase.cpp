/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/wifi_settings_screen/Wifi_SettingsViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Wifi_SettingsViewBase::Wifi_SettingsViewBase() :
    buttonCallback(this, &Wifi_SettingsViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Wifi_SettingsViewBase::flexButtonCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    ScreenSettings.setXY(0, 0);
    ScreenSettings.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_SCREEN2_ID));

    box1.setPosition(0, 0, 480, 53);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(184, 183, 179));

    Wifi.setXY(189, 4);
    Wifi.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    Wifi.setLinespacing(0);
    Wifi.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));

    ButtonSettings_Ok.setXY(415, 232);
    ButtonSettings_Ok.setBitmaps(touchgfx::Bitmap(BITMAP_BTN_ROUNDNEW_ID), touchgfx::Bitmap(BITMAP_BTN_ROUND_PRESSEDNEW_ID));
    ButtonSettings_Ok.setLabelText(touchgfx::TypedText(T_SINGLEUSEID23));
    ButtonSettings_Ok.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    ButtonSettings_Ok.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    ButtonSettings_Cancel.setXY(0, 232);
    ButtonSettings_Cancel.setBitmaps(touchgfx::Bitmap(BITMAP_BTN_ROUNDNEW_ID), touchgfx::Bitmap(BITMAP_BTN_ROUND_PRESSEDNEW_ID));
    ButtonSettings_Cancel.setLabelText(touchgfx::TypedText(T_SINGLEUSEID22));
    ButtonSettings_Cancel.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    ButtonSettings_Cancel.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    ButtonSettings_Cancel.setAction(buttonCallback);

    boxWithBorder1.setPosition(182, 85, 287, 45);
    boxWithBorder1.setColor(touchgfx::Color::getColorFrom24BitRGB(184, 183, 179));
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(107, 105, 105));
    boxWithBorder1.setBorderSize(3);

    textAreaID.setPosition(189, 94, 274, 24);
    textAreaID.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textAreaID.setLinespacing(0);
    textAreaIDBuffer[0] = 0;
    textAreaID.setWildcard(textAreaIDBuffer);
    textAreaID.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));

    boxWithBorder_PW.setPosition(182, 167, 287, 45);
    boxWithBorder_PW.setColor(touchgfx::Color::getColorFrom24BitRGB(184, 183, 179));
    boxWithBorder_PW.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(107, 105, 105));
    boxWithBorder_PW.setBorderSize(5);

    textAreaID_PW.setPosition(189, 177, 274, 24);
    textAreaID_PW.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textAreaID_PW.setLinespacing(0);
    textAreaID_PWBuffer[0] = 0;
    textAreaID_PW.setWildcard(textAreaID_PWBuffer);
    textAreaID_PW.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));

    textArea1.setXY(109, 95);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(252, 252, 252));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));

    textArea2.setXY(75, 177);
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(242, 241, 241));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID20));

    flexButtonSSID.setBoxWithBorderPosition(0, 0, 287, 44);
    flexButtonSSID.setBorderSize(5);
    flexButtonSSID.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
    flexButtonSSID.setPosition(182, 86, 287, 44);
    flexButtonSSID.setAlpha(0);
    flexButtonSSID.setAction(flexButtonCallback);

    flexButtonPassword.setBoxWithBorderPosition(0, 0, 287, 45);
    flexButtonPassword.setBorderSize(5);
    flexButtonPassword.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
    flexButtonPassword.setPosition(182, 167, 287, 45);
    flexButtonPassword.setAlpha(0);
    flexButtonPassword.setAction(flexButtonCallback);

    add(__background);
    add(ScreenSettings);
    add(box1);
    add(Wifi);
    add(ButtonSettings_Ok);
    add(ButtonSettings_Cancel);
    add(boxWithBorder1);
    add(textAreaID);
    add(boxWithBorder_PW);
    add(textAreaID_PW);
    add(textArea1);
    add(textArea2);
    add(flexButtonSSID);
    add(flexButtonPassword);
}

void Wifi_SettingsViewBase::setupScreen()
{

}

//Called when the screen is done with transition/load
void Wifi_SettingsViewBase::afterTransition()
{
    //InteractionupdateScreen
    //When screen is entered call virtual function
    //Call updateScreen
    updateScreen();
}

void Wifi_SettingsViewBase::KeyboardSelectedVar(uint8_t value)
{
    //InteractionKeyboardSelected
    //When KeyboardSelectedVar is called call virtual function
    //Call KeyboardSelected
    KeyboardSelected(value);

    //InteractionChangeToScreenboard
    //When InteractionKeyboardSelected completed change screen to ScreenKeyboard
    //Go to ScreenKeyboard with no screen transition
    application().gotoScreenKeyboardScreenNoTransition();
}

void Wifi_SettingsViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &ButtonSettings_Cancel)
    {
        //InteractionButtonCanel
        //When ButtonSettings_Cancel clicked change screen to Wifi
        //Go to Wifi with no screen transition
        application().gotoWifiScreenNoTransition();
    }
}

void Wifi_SettingsViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButtonSSID)
    {
        //InteractionButtonSsid
        //When flexButtonSSID clicked call KeyboardSelectedVar on Wifi_Settings
        //Call KeyboardSelectedVar
        KeyboardSelectedVar(0);
    }
    else if (&src == &flexButtonPassword)
    {
        //InteractionButtonPw
        //When flexButtonPassword clicked call KeyboardSelectedVar on Wifi_Settings
        //Call KeyboardSelectedVar
        KeyboardSelectedVar(1);
    }
}
